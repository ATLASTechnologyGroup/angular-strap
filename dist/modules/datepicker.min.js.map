{"version":3,"sources":["modules/datepicker.js"],"names":["angular","container","provider","keyboard","this","defaults","html","delay","useNative","dateType","dateFormat","timezone","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","autoclose","minDate","Infinity","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","fallbackFormats","isNative","isTouch","lang","$get","$datepicker","$tooltip","element","extend","config","DatepickerFactory","controller","el","selected","date","focus","pickerViews","datepickerViews","$views","viewDate","scope","$mode","$iconLeft","$iconRight","options","$picker","$select","disabled","select","$selectPane","value","$toggleMode","Date","length","$setToday","$clear","setMode","update","isDate","$date","updateDisabledDates","disabledDateRanges","dateRanges","forEach","i","$build","$dateValue","rows","$setDisabledEl","keep","$setViewValue","$render","copy","year","getFullYear","month","getDate","mode","pristine","call","$updateSelected","built","$isSelected","isDisabled","steps","targetDate","getUTCFullYear","getUTCMonth","UTC","$onMouseDown","evt","preventDefault","stopPropagation","getUTCDate","targetEl","$onKeyDown","nodeName","test","keyCode","shiftKey","altKey","parentScope","$digest","hide","onKeyDown","prop","init","attr","focusElement","_init","_destroy","destroy","off","_show","show","$timeout","_hide","on","blur","$element","directive","$options","link","getDefaultLocale","require","$window","navigator","userAgent","restrict","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","isMaxValid","isValid","isMinValid","isNaN","parsedDate","getTime","tryFallbackFormats","viewValue","output","fallbackParsers","result","parse","parser","triggerValid","onValid","triggerInvalid","getDateFormattedString","formatDate","falseValueRegExp","isDefined","key","$eval","bsKey","charAt","toUpperCase","slice","$dateFormatter","dateParser","$dateParser","strict","format","bsShow","newValue","$watch","oldValue","isString","match","validateAgainstMinMaxDate","$observe","disabledDates","$setValidity","timezoneOffsetAdjust","$formatters","modelValue","isUndefined","NaN","split","size","arrays","mod","n","m","arr","splice","$sce","weekDaysMin","weekdaysShort","weekDaysLabelsHtml","startDate","picker","weekDaysLabels","concat","views","getMonth","firstDayOfMonth","firstDayOfMonthOffset","getTimezoneOffset","firstDate","firstDateOffset","build","days","day","daylightSavingAdjust","push","isToday","toDateString","today","muted","label","title","showLabels","labels","isTodayDisabled","isSelected","time","indexOf","getDay","newDate","name","months","lastDate","actualMonth","parseInt","firstYear","years","actualYear","Array","prototype","setYear"],"mappings":"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","file":"modules/datepicker.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker',\n  [\n    'mgcrea.ngStrap.helpers.dateParser',\n    'mgcrea.ngStrap.helpers.dateFormatter',\n    'mgcrea.ngStrap.tooltip'\n  ])\n  .provider('$datepicker', function () {\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right',\n      fallbackFormats: []\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function DatepickerFactory(element, controller, config) {\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) {\n          options.startView -= options.minView;\n        }\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, { year: date.getFullYear(), month: date.getMonth(), date: date.getDate() });\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, { year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate() });\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected(el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n    };\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n        // Directive options\n        var options = { scope: scope };\n        angular.forEach([\n          'template',\n          'templateUrl',\n          'controller',\n          'controllerAs',\n          'placement',\n          'container',\n          'delay',\n          'trigger',\n          'html',\n          'animation',\n          'autoclose',\n          'dateType',\n          'dateFormat',\n          'timezone',\n          'modelDateFormat',\n          'dayFormat',\n          'strictFormat',\n          'startWeek',\n          'startDate',\n          'useNative',\n          'lang',\n          'startView',\n          'minView',\n          'iconLeft',\n          'iconRight',\n          'daysOfWeekDisabled',\n          'id',\n          'prefixClass',\n          'prefixEvent',\n          'hasToday',\n          'hasClear',\n          'fallbackFormats'\n        ], function (key) {\n          if (angular.isDefined(attr[key])) {\n            options[key] = attr[key];\n          }\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach([\n          'html',\n          'container',\n          'autoclose',\n          'useNative',\n          'hasToday',\n          'hasClear'\n        ], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach([\n          'onBeforeShow',\n          'onShow',\n          'onBeforeHide',\n          'onHide',\n          'onInvalid',\n          'onValid'\n        ], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        //bind fallback array if defined\n        if (angular.isDefined(attr.fallbackFormats)) {\n          options.fallbackFormats = scope.$eval(attr.fallbackFormats);\n        }\n        else {\n          options.fallbackFormats = [];\n        }\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n        var fallbackParsers = [];\n        angular.forEach(options.fallbackFormats, function (format) {\n          fallbackParsers.push($dateParser({\n            format: format,\n            lang: lang,\n            strict: options.strictFormat\n          }));\n        });\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges(ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate(parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n\n          return isValid && isMaxValid && isMinValid;\n        }\n\n        function tryFallbackFormats(viewValue) {\n          var output;\n          angular.forEach(fallbackParsers, function (parser) {\n            var result = parser.parse(viewValue, controller.$dateValue);\n            if (result) {\n              output = result;\n            }\n          });\n\n          //Return undefined if a fallback date wasn't matched\n          return output;\n        }\n\n        function triggerValid() {\n          if (options.onValid) {\n            options.onValid();\n          }\n        }\n\n        function triggerInvalid() {\n          if (options.onInvalid) {\n            options.onInvalid();\n          }\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            triggerValid();\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            parsedDate = tryFallbackFormats(viewValue);\n          }\n\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            triggerInvalid();\n            return;\n          }\n          if (!validateAgainstMinMaxDate(parsedDate)) {\n            triggerInvalid();\n          }\n\n          triggerValid();\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split(arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod(n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({ format: options.dateFormat, lang: lang, strict: options.strictFormat });\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = { year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate() };\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: { month: 1 },\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n              // chaging picker current month will cause viewDate.date to be set to first day of the month,\n              // in $datepicker.$selectPane, so picker would not update selected day display if\n              // user picks first day of the new month.\n              // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n            // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({ date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day) });\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n            // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n            // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n            // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: { year: 1 },\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, { month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({ date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month) });\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: { year: 12 },\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({ date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year) });\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n"],"sourceRoot":"/source/"}