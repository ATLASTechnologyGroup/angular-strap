{"version":3,"sources":["modules/datepicker.js"],"names":["angular","container","provider","keyboard","this","defaults","html","delay","useNative","dateType","dateFormat","timezone","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","autoclose","minDate","Infinity","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","fallbackFormats","isNative","isTouch","DatepickerFactory","$get","options","$datepicker","$options","pickerViews","views","el","selected","date","element","focus","viewDate","scope","$iconLeft","$iconRight","$hasToday","$picker","$select","select","$selectPane","value","$hasClear","$toggleMode","$views","$mode","setMode","Date","length","$setToday","$clear","update","isDate","$date","updateDisabledDates","disabledDateRanges","dateRanges","forEach","i","$build","controller","$dateValue","rows","$setDisabledEl","keep","$setViewValue","$render","copy","extend","year","getFullYear","month","getDate","mode","pristine","call","$updateSelected","built","$isSelected","disabled","isDisabled","steps","targetDate","getUTCFullYear","getUTCMonth","UTC","$onMouseDown","evt","preventDefault","stopPropagation","getUTCDate","targetEl","$onKeyDown","nodeName","test","keyCode","shiftKey","altKey","parentScope","$digest","hide","onKeyDown","prop","init","attr","focusElement","_init","_destroy","destroy","off","_show","show","$timeout","_hide","on","blur","$element","directive","$scope","link","datepickerViews","require","$window","navigator","userAgent","restrict","falseValueRegExp","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","isMaxValid","isValid","isMinValid","isNaN","parsedDate","getTime","tryFallbackFormats","viewValue","result","fallbackParsers","parser","parse","$parsers","unshift","getDateFormattedString","formatDate","key","isDefined","$eval","bsKey","lang","format","dateParser","$dateParser","strict","push","bsShow","newValue","$watch","oldValue","isString","match","validateAgainstMinMaxDate","$observe","disabledDates","$setValidity","timezoneOffsetAdjust","$formatters","modelValue","isUndefined","NaN","split","size","arrays","mod","n","m","arr","splice","$dateFormatter","$sce","weekDaysMin","weekdaysShort","weekDaysLabelsHtml","startDate","picker","weekDaysLabels","slice","concat","getMonth","firstDayOfMonth","firstDayOfMonthOffset","getTimezoneOffset","firstDate","firstDateOffset","build","days","day","daylightSavingAdjust","isToday","toDateString","today","muted","label","title","showLabels","labels","isTodayDisabled","isSelected","time","indexOf","getDay","newDate","name","months","lastDate","actualMonth","parseInt","firstYear","years","actualYear","Array","prototype","setYear"],"mappings":"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","file":"modules/datepicker.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right',\n      fallbackFormats: []\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory(element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, { year: date.getFullYear(), month: date.getMonth(), date: date.getDate() });\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, { year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate() });\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected(el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = { scope: scope };\n        angular.forEach([\n          'template',\n          'templateUrl',\n          'controller',\n          'controllerAs',\n          'placement',\n          'container',\n          'delay',\n          'trigger',\n          'html',\n          'animation',\n          'autoclose',\n          'dateType',\n          'dateFormat',\n          'timezone',\n          'modelDateFormat',\n          'dayFormat',\n          'strictFormat',\n          'startWeek',\n          'startDate',\n          'useNative',\n          'lang',\n          'startView',\n          'minView',\n          'iconLeft',\n          'iconRight',\n          'daysOfWeekDisabled',\n          'id',\n          'prefixClass',\n          'prefixEvent',\n          'hasToday',\n          'hasClear',\n          'fallbackFormats'\n        ], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n        var fallbackParsers = [];\n        for (var i = 0; i < options.fallbackFormats.length; i++) {\n          var format = options.fallbackFormats[i];\n          fallbackParsers.push($dateParser({\n            format: format,\n            lang: lang,\n            strict: options.strictFormat\n          }));\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges(ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate(parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        function tryFallbackFormats(viewValue) {\n          var result;\n          for (var i = 0; i < fallbackParsers.length; i++) {\n            var parser = fallbackParsers[i];\n            var result = parser.parse(viewValue, controller.$dateValue);\n            if (result) {\n              return result;\n            }\n          }\n          //Return undefined if a fallback date wasn't matched\n          return;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            parsedDate = tryFallbackFormats(viewValue);\n          }\n\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split(arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod(n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({ format: options.dateFormat, lang: lang, strict: options.strictFormat });\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = { year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate() };\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: { month: 1 },\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n              // chaging picker current month will cause viewDate.date to be set to first day of the month,\n              // in $datepicker.$selectPane, so picker would not update selected day display if\n              // user picks first day of the new month.\n              // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n            // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({ date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day) });\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n            // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n            // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n            // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: { year: 1 },\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, { month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({ date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month) });\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: { year: 12 },\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({ date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year) });\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n"],"sourceRoot":"/source/"}