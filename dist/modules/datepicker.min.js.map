{"version":3,"sources":["modules/datepicker.js"],"names":["angular","container","provider","keyboard","this","defaults","html","delay","useNative","dateType","dateFormat","timezone","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","autoclose","minDate","Infinity","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","fallbackFormats","isNative","isTouch","DatepickerFactory","$get","options","$datepicker","$options","pickerViews","views","el","selected","date","element","focus","viewDate","scope","$iconLeft","$iconRight","$hasToday","$picker","$select","disabled","select","$selectPane","value","$views","$mode","$toggleMode","Date","length","$setToday","$clear","setMode","update","isDate","$date","updateDisabledDates","disabledDateRanges","dateRanges","forEach","i","$build","controller","$dateValue","rows","$setDisabledEl","keep","$setViewValue","$render","copy","extend","year","getFullYear","month","getDate","mode","pristine","call","$updateSelected","built","$isSelected","isDisabled","steps","targetDate","getUTCFullYear","getUTCMonth","UTC","$onMouseDown","evt","preventDefault","stopPropagation","getUTCDate","targetEl","$onKeyDown","nodeName","test","keyCode","shiftKey","altKey","parentScope","$digest","hide","onKeyDown","prop","init","attr","focusElement","_init","_destroy","destroy","off","_show","show","$timeout","_hide","on","blur","$element","directive","$scope","link","datepickerViews","require","$window","navigator","userAgent","restrict","falseValueRegExp","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","isMaxValid","isValid","isMinValid","isNaN","parsedDate","getTime","tryFallbackFormats","viewValue","output","fallbackParsers","result","parse","parser","triggerValid","onValid","onInvalid","getDateFormattedString","formatDate","key","isDefined","bsKey","charAt","toUpperCase","slice","lang","$dateFormatter","dateParser","$dateParser","strict","format","bsShow","newValue","$watch","oldValue","isString","match","validateAgainstMinMaxDate","$observe","disabledDates","$setValidity","triggerInvalid","timezoneOffsetAdjust","$formatters","modelValue","isUndefined","NaN","split","size","arrays","mod","n","m","arr","splice","$sce","weekDaysMin","weekdaysShort","weekDaysLabelsHtml","startDate","picker","weekDaysLabels","concat","getMonth","firstDayOfMonth","firstDayOfMonthOffset","getTimezoneOffset","firstDate","firstDateOffset","build","days","day","daylightSavingAdjust","push","isToday","toDateString","today","muted","label","title","showLabels","labels","isTodayDisabled","isSelected","time","indexOf","getDay","newDate","name","months","lastDate","actualMonth","parseInt","firstYear","years","actualYear","Array","prototype","setYear"],"mappings":"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","file":"modules/datepicker.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'\n])\n  .provider('$datepicker', function () {\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right',\n      fallbackFormats: []\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory(element, controller, config) {\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, { year: date.getFullYear(), month: date.getMonth(), date: date.getDate() });\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, { year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate() });\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected(el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n    };\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n        // Directive options\n        var options = { scope: scope };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'fallbackFormats'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onInvalid', 'onValid'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) options[key] = scope.$eval(attr[bsKey]);\n        });\n\n        //bind fallback array if defined\n        if (angular.isDefined(attr.fallbackFormats)) {\n          options.fallbackFormats = scope.$eval(attr.fallbackFormats);\n        }\n        else {\n          options.fallbackFormats = [];\n        }\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n        var fallbackParsers = [];\n        angular.forEach(options.fallbackFormats, function (format) {\n          fallbackParsers.push($dateParser({\n            format: format,\n            lang: lang,\n            strict: options.strictFormat\n          }));\n        });\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges(ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate(parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n\n          return isValid && isMaxValid && isMinValid;\n        }\n\n        function tryFallbackFormats(viewValue) {\n          var output;\n          angular.forEach(fallbackParsers, function (parser) {\n            var result = parser.parse(viewValue, controller.$dateValue);\n            if (result) {\n              output = result;\n            }\n          });\n\n          //Return undefined if a fallback date wasn't matched\n          return output;\n        }\n\n        function triggerValid() {\n          if (options.onValid) options.onValid();\n        }\n\n        function triggerInvalid() {\n          if (options.onInvalid) options.onInvalid();\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            triggerValid();\n\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n\n          if (!parsedDate || isNaN(parsedDate.getTime())) parsedDate = tryFallbackFormats(viewValue);\n\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            triggerInvalid();\n\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n\n          if (!validateAgainstMinMaxDate(parsedDate)) {\n            triggerInvalid();\n          } else {\n            triggerValid();\n          }\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split(arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod(n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({ format: options.dateFormat, lang: lang, strict: options.strictFormat });\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = { year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate() };\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: { month: 1 },\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n              // chaging picker current month will cause viewDate.date to be set to first day of the month,\n              // in $datepicker.$selectPane, so picker would not update selected day display if\n              // user picks first day of the new month.\n              // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n            // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({ date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day) });\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n            // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n            // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n            // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: { year: 1 },\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, { month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({ date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month) });\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: { year: 12 },\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({ date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year) });\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n"],"sourceRoot":"/source/"}