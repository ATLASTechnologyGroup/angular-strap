{"version":3,"sources":["angular-strap.js","tooltip/tooltip.js","helpers/compiler.js","dropdown/dropdown.js","typeahead/typeahead.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","navbar/navbar.js","popover/popover.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","datepicker/datepicker.js","button/button.js","collapse/collapse.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["prefixClass","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","data","this","compile","controller","console","controllerAs","resolve","locals","bindToController","angular","forEach","value","isString","$injector","key","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","target","provider","placement","titleTemplate","trigger","keyboard","show","title","type","delay","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","$get","promise","$tooltip","$bsCompiler","split","clearTimeout","hoverState","prefixEvent","hide","isFunction","onShow","leaveAnimateCallback","$emit","destroyTipElement","onHide","_tipToHide","evt","preventDefault","triggers","nodeName","on","isTouch","toggle","enter","unbindTriggerEvents","length","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$timeout","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","$element","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","test","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$$phase","$options","config","$promise","$scope","$new","$rootScope","toLowerCase","$id","attr","map","parseFloat","$sce","trustAsHtml","$setEnabled","$$postDigest","id","$hide","setEnabled","isEnabled","compileData","tipContainer","init","container","bindTriggerEvents","isElement","destroy","focus","isDefined","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","addClass","safeDigest","version","prepend","$$rAF","$applyPlacement","$animate","enterAnimateCallback","_blur","onBeforeHide","blur","leave","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","stopPropagation","directive","$root","$digest","restrict","query","querySelectorAll","isNative","tooltip","transclusion","falseValueRegExp","$eval","bsKey","dataTarget","slice","hasOwnProperty","oldValue","$observe","newValue","bsTooltip","bsShow","$watch","match","setViewport","$on","minLength","filter","limit","autoSelect","comparator","trimValue","$typeahead","parentScope","$resetMatches","$window","$matches","activate","$activeIndex","select","index","$select","matches","$isVisible","update","$render","onSelect","$setViewValue","equals","$onMouseDown","clientTop","active","offsetTop","clientBottom","highWatermark","Math","lowWatermark","clientHeight","keyCode","$$updateScrollTop","isUndefined","$onKeyDown","TypeaheadFactory","array","$filter","expression","results","postLink","require","charAt","toUpperCase","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","ngModel","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","copy","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","_tabsHash","_addTabControl","navClass","activeClass","$attrs","control","$activeClass","self","$panes","$activePaneChangeListeners","$push","pane","$active","$navClass","$remove","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$onKeyPress","e","$isActive","$index","$tab","transclude","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","attrs","bsActivePane","parsedBsActivePane","assign","$parse","render","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$getIndex","anchor","anchorCandidate","ddlMenuContainer","itemPosition","menuHeight","listItemHeight","activeListItem","$isIE","ua","stopImmediatePropagation","activeElement","tagName","dataMultiple","inputEl","addEventListener","$selectScrollFix","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","backdrop","size","zIndex","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","backdropBaseZindex","$show","bottom","destroyModalElement","z-index","defaultPrevented","customClass","minor","backdropAnimation","bindBackdropEvents","which","lg","sm","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","toString","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","fallbackFormats","$datepicker","DatepickerFactory","pickerViews","datepickerViews","$views","$mode","$iconLeft","$iconRight","$picker","$selectPane","$toggleMode","$setToday","$clear","setMode","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","tryFallbackFormats","output","fallbackParsers","result","parser","triggerValid","onValid","triggerInvalid","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","views","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","isActive","checked","toggleClass","bind","toggleEvent","v","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","$activeIndexes","bsCollapseCtrl","actionEventHandler","bsCollapseToggle","$registerTarget","action","AsideFactory","$aside","bsAside","aside","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n\n\t\t\t// scroll to active list item\n            $timeout(function () {\n              var ddlMenuContainer = angular.element('ul.select.dropdown-menu:last-of-type').get(0);\n              var activeListItem = angular.element(ddlMenuContainer).find('li.active:first');\n              var listItemHeight = activeListItem.height();\n              var itemPosition = ddlMenuContainer.scrollTop + activeListItem.position().top;\n              var menuHeight = angular.element(ddlMenuContainer).height();\n\n              if (itemPosition < ddlMenuContainer.scrollTop) {\n                  ddlMenuContainer.scrollTop = itemPosition;\n              }\n              else if ((itemPosition + listItemHeight) > (ddlMenuContainer.scrollTop + menuHeight)) {\n                  ddlMenuContainer.scrollTop += (itemPosition + listItemHeight) - (ddlMenuContainer.scrollTop + menuHeight);\n              }\n            });\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory(element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick(evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink(scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker',\n  [\n    'mgcrea.ngStrap.helpers.dateParser',\n    'mgcrea.ngStrap.helpers.dateFormatter',\n    'mgcrea.ngStrap.tooltip'\n  ])\n  .provider('$datepicker', function () {\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right',\n      fallbackFormats: []\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function DatepickerFactory(element, controller, config) {\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) {\n          options.startView -= options.minView;\n        }\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, { year: date.getFullYear(), month: date.getMonth(), date: date.getDate() });\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, { year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate() });\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected(el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n    };\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n        // Directive options\n        var options = { scope: scope };\n        angular.forEach([\n          'template',\n          'templateUrl',\n          'controller',\n          'controllerAs',\n          'placement',\n          'container',\n          'delay',\n          'trigger',\n          'html',\n          'animation',\n          'autoclose',\n          'dateType',\n          'dateFormat',\n          'timezone',\n          'modelDateFormat',\n          'dayFormat',\n          'strictFormat',\n          'startWeek',\n          'startDate',\n          'useNative',\n          'lang',\n          'startView',\n          'minView',\n          'iconLeft',\n          'iconRight',\n          'daysOfWeekDisabled',\n          'id',\n          'prefixClass',\n          'prefixEvent',\n          'hasToday',\n          'hasClear',\n          'fallbackFormats'\n        ], function (key) {\n          if (angular.isDefined(attr[key])) {\n            options[key] = attr[key];\n          }\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach([\n          'html',\n          'container',\n          'autoclose',\n          'useNative',\n          'hasToday',\n          'hasClear'\n        ], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach([\n          'onBeforeShow',\n          'onShow',\n          'onBeforeHide',\n          'onHide',\n          'onInvalid',\n          'onValid'\n        ], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        //bind fallback array if defined\n        if (angular.isDefined(attr.fallbackFormats)) {\n          options.fallbackFormats = scope.$eval(attr.fallbackFormats);\n        }\n        else {\n          options.fallbackFormats = [];\n        }\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n        var fallbackParsers = [];\n        angular.forEach(options.fallbackFormats, function (format) {\n          fallbackParsers.push($dateParser({\n            format: format,\n            lang: lang,\n            strict: options.strictFormat\n          }));\n        });\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges(ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate(parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n\n          return isValid && isMaxValid && isMinValid;\n        }\n\n        function tryFallbackFormats(viewValue) {\n          var output;\n          angular.forEach(fallbackParsers, function (parser) {\n            var result = parser.parse(viewValue, controller.$dateValue);\n            if (result) {\n              output = result;\n            }\n          });\n\n          //Return undefined if a fallback date wasn't matched\n          return output;\n        }\n\n        function triggerValid() {\n          if (options.onValid) {\n            options.onValid();\n          }\n        }\n\n        function triggerInvalid() {\n          if (options.onInvalid) {\n            options.onInvalid();\n          }\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            triggerValid();\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            parsedDate = tryFallbackFormats(viewValue);\n          }\n\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            triggerInvalid();\n            return;\n          }\n          if (!validateAgainstMinMaxDate(parsedDate)) {\n            triggerInvalid();\n          }\n\n          triggerValid();\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split(arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod(n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({ format: options.dateFormat, lang: lang, strict: options.strictFormat });\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = { year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate() };\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: { month: 1 },\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n              // chaging picker current month will cause viewDate.date to be set to first day of the month,\n              // in $datepicker.$selectPane, so picker would not update selected day display if\n              // user picks first day of the new month.\n              // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n            // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({ date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day) });\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n            // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n            // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n            // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: { year: 1 },\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, { month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({ date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month) });\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: { year: 12 },\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({ date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year) });\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory(element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick(evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink(scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n\n\t\t\t// scroll to active list item\n            $timeout(function () {\n              var ddlMenuContainer = angular.element('ul.select.dropdown-menu:last-of-type').get(0);\n              var activeListItem = angular.element(ddlMenuContainer).find('li.active:first');\n              var listItemHeight = activeListItem.height();\n              var itemPosition = ddlMenuContainer.scrollTop + activeListItem.position().top;\n              var menuHeight = angular.element(ddlMenuContainer).height();\n\n              if (itemPosition < ddlMenuContainer.scrollTop) {\n                  ddlMenuContainer.scrollTop = itemPosition;\n              }\n              else if ((itemPosition + listItemHeight) > (ddlMenuContainer.scrollTop + menuHeight)) {\n                  ddlMenuContainer.scrollTop += (itemPosition + listItemHeight) - (ddlMenuContainer.scrollTop + menuHeight);\n              }\n            });\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker',\n  [\n    'mgcrea.ngStrap.helpers.dateParser',\n    'mgcrea.ngStrap.helpers.dateFormatter',\n    'mgcrea.ngStrap.tooltip'\n  ])\n  .provider('$datepicker', function () {\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right',\n      fallbackFormats: []\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function DatepickerFactory(element, controller, config) {\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) {\n          options.startView -= options.minView;\n        }\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, { year: date.getFullYear(), month: date.getMonth(), date: date.getDate() });\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, { year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate() });\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected(el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n    };\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n        // Directive options\n        var options = { scope: scope };\n        angular.forEach([\n          'template',\n          'templateUrl',\n          'controller',\n          'controllerAs',\n          'placement',\n          'container',\n          'delay',\n          'trigger',\n          'html',\n          'animation',\n          'autoclose',\n          'dateType',\n          'dateFormat',\n          'timezone',\n          'modelDateFormat',\n          'dayFormat',\n          'strictFormat',\n          'startWeek',\n          'startDate',\n          'useNative',\n          'lang',\n          'startView',\n          'minView',\n          'iconLeft',\n          'iconRight',\n          'daysOfWeekDisabled',\n          'id',\n          'prefixClass',\n          'prefixEvent',\n          'hasToday',\n          'hasClear',\n          'fallbackFormats'\n        ], function (key) {\n          if (angular.isDefined(attr[key])) {\n            options[key] = attr[key];\n          }\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach([\n          'html',\n          'container',\n          'autoclose',\n          'useNative',\n          'hasToday',\n          'hasClear'\n        ], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach([\n          'onBeforeShow',\n          'onShow',\n          'onBeforeHide',\n          'onHide',\n          'onInvalid',\n          'onValid'\n        ], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        //bind fallback array if defined\n        if (angular.isDefined(attr.fallbackFormats)) {\n          options.fallbackFormats = scope.$eval(attr.fallbackFormats);\n        }\n        else {\n          options.fallbackFormats = [];\n        }\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n        var fallbackParsers = [];\n        angular.forEach(options.fallbackFormats, function (format) {\n          fallbackParsers.push($dateParser({\n            format: format,\n            lang: lang,\n            strict: options.strictFormat\n          }));\n        });\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges(ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate(parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n\n          return isValid && isMaxValid && isMinValid;\n        }\n\n        function tryFallbackFormats(viewValue) {\n          var output;\n          angular.forEach(fallbackParsers, function (parser) {\n            var result = parser.parse(viewValue, controller.$dateValue);\n            if (result) {\n              output = result;\n            }\n          });\n\n          //Return undefined if a fallback date wasn't matched\n          return output;\n        }\n\n        function triggerValid() {\n          if (options.onValid) {\n            options.onValid();\n          }\n        }\n\n        function triggerInvalid() {\n          if (options.onInvalid) {\n            options.onInvalid();\n          }\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            triggerValid();\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            parsedDate = tryFallbackFormats(viewValue);\n          }\n\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            triggerInvalid();\n            return;\n          }\n          if (!validateAgainstMinMaxDate(parsedDate)) {\n            triggerInvalid();\n          }\n\n          triggerValid();\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split(arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod(n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({ format: options.dateFormat, lang: lang, strict: options.strictFormat });\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = { year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate() };\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: { month: 1 },\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n              // chaging picker current month will cause viewDate.date to be set to first day of the month,\n              // in $datepicker.$selectPane, so picker would not update selected day display if\n              // user picks first day of the new month.\n              // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n            // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({ date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day) });\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n            // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n            // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n            // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: { year: 1 },\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, { month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({ date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month) });\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: { year: 12 },\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({ date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year) });\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}