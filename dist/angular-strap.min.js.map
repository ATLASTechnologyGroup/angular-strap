{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","dropdown/dropdown.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","alert/alert.js","aside/aside.js","affix/affix.js","module.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","prefixClass","data","this","compile","controller","console","controllerAs","resolve","locals","bindToController","angular","forEach","value","isString","$injector","key","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","$typeahead","parentScope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","config","$$postDigest","$scope","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$render","$emit","isDefined","onSelect","$setViewValue","length","isFunction","equals","$onMouseDown","preventDefault","stopPropagation","clientTop","active","offsetTop","clientBottom","highWatermark","scrollTop","Math","lowWatermark","clientHeight","keyCode","$$updateScrollTop","$digest","show","isUndefined","$element","hide","$onKeyDown","$$phase","$root","TypeaheadFactory","array","$filter","expression","directive","results","postLink","attr","restrict","require","falseValueRegExp","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","destroy","$on","target","placement","titleTemplate","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","promise","$bsCompiler","split","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","nodeName","on","isTouch","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$options","$promise","$new","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","compileData","tipContainer","init","bindTriggerEvents","isElement","focus","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","addClass","version","prepend","$applyPlacement","$animate","enterAnimateCallback","_blur","onBeforeHide","blur","leave","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","query","querySelectorAll","isNative","tooltip","transclusion","$eval","dataTarget","hasOwnProperty","$observe","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","copy","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","_tabsHash","_addTabControl","navClass","activeClass","$attrs","control","$activeClass","self","$panes","$activePaneChangeListeners","$push","pane","$active","$navClass","$remove","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$onKeyPress","e","$isActive","$index","$tab","transclude","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","attrs","bsActivePane","parsedBsActivePane","assign","$parse","render","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$getIndex","anchor","anchorCandidate","ddlMenuContainer","itemPosition","menuHeight","listItemHeight","activeListItem","$isIE","ua","stopImmediatePropagation","activeElement","tagName","dataMultiple","inputEl","addEventListener","$selectScrollFix","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","backdrop","size","zIndex","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","backdropBaseZindex","$show","bottom","destroyModalElement","z-index","defaultPrevented","customClass","minor","backdropAnimation","bindBackdropEvents","which","lg","sm","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","toString","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","fallbackFormats","$datepicker","DatepickerFactory","pickerViews","datepickerViews","$views","$mode","$iconLeft","$iconRight","$picker","$selectPane","$toggleMode","$setToday","$clear","setMode","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","tryFallbackFormats","result","fallbackParsers","parser","triggerValid","onValid","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","triggerInvalid","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","views","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","actionEventHandler","bsCollapseToggle","bind","$registerTarget","action","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","v","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AsideFactory","$aside","bsAside","aside","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n\n\t\t\t// scroll to active list item\n            $timeout(function () {\n              var ddlMenuContainer = angular.element('ul.select.dropdown-menu:last-of-type').get(0);\n              var activeListItem = angular.element(ddlMenuContainer).find('li.active:first');\n              var listItemHeight = activeListItem.height();\n              var itemPosition = ddlMenuContainer.scrollTop + activeListItem.position().top;\n              var menuHeight = angular.element(ddlMenuContainer).height();\n\n              if (itemPosition < ddlMenuContainer.scrollTop) {\n                  ddlMenuContainer.scrollTop = itemPosition;\n              }\n              else if ((itemPosition + listItemHeight) > (ddlMenuContainer.scrollTop + menuHeight)) {\n                  ddlMenuContainer.scrollTop += (itemPosition + listItemHeight) - (ddlMenuContainer.scrollTop + menuHeight);\n              }\n            });\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory(element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick(evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink(scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker',\n\t[\n\t\t'mgcrea.ngStrap.helpers.dateParser',\n\t\t'mgcrea.ngStrap.helpers.dateFormatter',\n\t\t'mgcrea.ngStrap.tooltip'\n\t])\n\t.provider('$datepicker', function () {\n\t\tvar defaults = this.defaults = {\n\t\t\tanimation: 'am-fade',\n\t\t\tprefixClass: 'datepicker',\n\t\t\tplacement: 'bottom-left',\n\t\t\ttemplateUrl: 'datepicker/datepicker.tpl.html',\n\t\t\ttrigger: 'focus',\n\t\t\tcontainer: false,\n\t\t\tkeyboard: true,\n\t\t\thtml: false,\n\t\t\tdelay: 0,\n\t\t\tuseNative: false,\n\t\t\tdateType: 'date',\n\t\t\tdateFormat: 'shortDate',\n\t\t\ttimezone: null,\n\t\t\tmodelDateFormat: null,\n\t\t\tdayFormat: 'dd',\n\t\t\tmonthFormat: 'MMM',\n\t\t\tyearFormat: 'yyyy',\n\t\t\tmonthTitleFormat: 'MMMM yyyy',\n\t\t\tyearTitleFormat: 'yyyy',\n\t\t\tstrictFormat: false,\n\t\t\tautoclose: false,\n\t\t\tminDate: -Infinity,\n\t\t\tmaxDate: +Infinity,\n\t\t\tstartView: 0,\n\t\t\tminView: 0,\n\t\t\tstartWeek: 0,\n\t\t\tdaysOfWeekDisabled: '',\n\t\t\thasToday: false,\n\t\t\thasClear: false,\n\t\t\ticonLeft: 'glyphicon glyphicon-chevron-left',\n\t\t\ticonRight: 'glyphicon glyphicon-chevron-right',\n\t\t\tfallbackFormats: []\n\t\t};\n\n\t\tthis.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\t\t\tvar isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\t\t\tvar isTouch = ('createTouch' in $window.document) && isNative;\n\t\t\tif (!defaults.lang) {\n\t\t\t\tdefaults.lang = $dateFormatter.getDefaultLocale();\n\t\t\t}\n\n\t\t\tfunction DatepickerFactory(element, controller, config) {\n\t\t\t\tvar $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n\t\t\t\tvar parentScope = config.scope;\n\t\t\t\tvar options = $datepicker.$options;\n\t\t\t\tvar scope = $datepicker.$scope;\n\t\t\t\tif (options.startView) {\n\t\t\t\t\toptions.startView -= options.minView;\n\t\t\t\t}\n\n\t\t\t\t// View vars\n\n\t\t\t\tvar pickerViews = datepickerViews($datepicker);\n\t\t\t\t$datepicker.$views = pickerViews.views;\n\t\t\t\tvar viewDate = pickerViews.viewDate;\n\t\t\t\tscope.$mode = options.startView;\n\t\t\t\tscope.$iconLeft = options.iconLeft;\n\t\t\t\tscope.$iconRight = options.iconRight;\n\t\t\t\tscope.$hasToday = options.hasToday;\n\t\t\t\tscope.$hasClear = options.hasClear;\n\t\t\t\tvar $picker = $datepicker.$views[scope.$mode];\n\n\t\t\t\t// Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n\t\t\t\t\t$datepicker.select(date);\n\t\t\t\t};\n\t\t\t\tscope.$selectPane = function (value) {\n\t\t\t\t\t$datepicker.$selectPane(value);\n\t\t\t\t};\n\t\t\t\tscope.$toggleMode = function () {\n\t\t\t\t\t$datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n\t\t\t\t};\n\t\t\t\tscope.$setToday = function () {\n\t\t\t\t\tif (options.autoclose) {\n\t\t\t\t\t\t$datepicker.setMode(0);\n\t\t\t\t\t\t$datepicker.select(new Date());\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$datepicker.select(new Date(), true);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tscope.$clear = function () {\n\t\t\t\t\tif (options.autoclose) {\n\t\t\t\t\t\t$datepicker.setMode(0);\n\t\t\t\t\t\t$datepicker.select(null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$datepicker.select(null, true);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Public methods\n\n\t\t\t\t$datepicker.update = function (date) {\n\t\t\t\t\t// console.warn('$datepicker.update() newValue=%o', date);\n\t\t\t\t\tif (angular.isDate(date) && !isNaN(date.getTime())) {\n\t\t\t\t\t\t$datepicker.$date = date;\n\t\t\t\t\t\t$picker.update.call($picker, date);\n\t\t\t\t\t}\n\t\t\t\t\t// Build only if pristine\n\t\t\t\t\t$datepicker.$build(true);\n\t\t\t\t};\n\n\t\t\t\t$datepicker.updateDisabledDates = function (dateRanges) {\n\t\t\t\t\toptions.disabledDateRanges = dateRanges;\n\t\t\t\t\tfor (var i = 0, l = scope.rows.length; i < l; i++) {\n\t\t\t\t\t\tangular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t$datepicker.select = function (date, keep) {\n\t\t\t\t\t// console.warn('$datepicker.select', date, scope.$mode);\n\t\t\t\t\tif (angular.isDate(date)) {\n\t\t\t\t\t\tif (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n\t\t\t\t\t\t\tcontroller.$dateValue = new Date(date);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontroller.$dateValue = null;\n\t\t\t\t\t}\n\t\t\t\t\tif (!scope.$mode || keep) {\n\t\t\t\t\t\tcontroller.$setViewValue(angular.copy(date));\n\t\t\t\t\t\tcontroller.$render();\n\t\t\t\t\t\tif (options.autoclose && !keep) {\n\t\t\t\t\t\t\t$timeout(function () { $datepicker.hide(true); });\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tangular.extend(viewDate, { year: date.getFullYear(), month: date.getMonth(), date: date.getDate() });\n\t\t\t\t\t\t$datepicker.setMode(scope.$mode - 1);\n\t\t\t\t\t\t$datepicker.$build();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t$datepicker.setMode = function (mode) {\n\t\t\t\t\t// console.warn('$datepicker.setMode', mode);\n\t\t\t\t\tscope.$mode = mode;\n\t\t\t\t\t$picker = $datepicker.$views[scope.$mode];\n\t\t\t\t\t$datepicker.$build();\n\t\t\t\t};\n\n\t\t\t\t// Protected methods\n\n\t\t\t\t$datepicker.$build = function (pristine) {\n\t\t\t\t\t// console.warn('$datepicker.$build() viewDate=%o', viewDate);\n\t\t\t\t\tif (pristine === true && $picker.built) return;\n\t\t\t\t\tif (pristine === false && !$picker.built) return;\n\t\t\t\t\t$picker.build.call($picker);\n\t\t\t\t};\n\n\t\t\t\t$datepicker.$updateSelected = function () {\n\t\t\t\t\tfor (var i = 0, l = scope.rows.length; i < l; i++) {\n\t\t\t\t\t\tangular.forEach(scope.rows[i], updateSelected);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t$datepicker.$isSelected = function (date) {\n\t\t\t\t\treturn $picker.isSelected(date);\n\t\t\t\t};\n\n\t\t\t\t$datepicker.$setDisabledEl = function (el) {\n\t\t\t\t\tel.disabled = $picker.isDisabled(el.date);\n\t\t\t\t};\n\n\t\t\t\t$datepicker.$selectPane = function (value) {\n\t\t\t\t\tvar steps = $picker.steps;\n\t\t\t\t\t// set targetDate to first day of month to avoid problems with\n\t\t\t\t\t// date values rollover. This assumes the viewDate does not\n\t\t\t\t\t// depend on the day of the month\n\t\t\t\t\tvar targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n\t\t\t\t\tangular.extend(viewDate, { year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate() });\n\t\t\t\t\t$datepicker.$build();\n\t\t\t\t};\n\n\t\t\t\t$datepicker.$onMouseDown = function (evt) {\n\t\t\t\t\t// Prevent blur on mousedown on .dropdown-menu\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\tevt.stopPropagation();\n\t\t\t\t\t// Emulate click for mobile devices\n\t\t\t\t\tif (isTouch) {\n\t\t\t\t\t\tvar targetEl = angular.element(evt.target);\n\t\t\t\t\t\tif (targetEl[0].nodeName.toLowerCase() !== 'button') {\n\t\t\t\t\t\t\ttargetEl = targetEl.parent();\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttargetEl.triggerHandler('click');\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t$datepicker.$onKeyDown = function (evt) {\n\t\t\t\t\tif (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\tevt.stopPropagation();\n\n\t\t\t\t\tif (evt.keyCode === 13) {\n\t\t\t\t\t\tif (!scope.$mode) {\n\t\t\t\t\t\t\t$datepicker.hide(true);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tscope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Navigate with keyboard\n\t\t\t\t\t$picker.onKeyDown(evt);\n\t\t\t\t\tparentScope.$digest();\n\t\t\t\t};\n\n\t\t\t\t// Private\n\n\t\t\t\tfunction updateSelected(el) {\n\t\t\t\t\tel.selected = $datepicker.$isSelected(el.date);\n\t\t\t\t}\n\n\t\t\t\tfunction focusElement() {\n\t\t\t\t\telement[0].focus();\n\t\t\t\t}\n\n\t\t\t\t// Overrides\n\n\t\t\t\tvar _init = $datepicker.init;\n\t\t\t\t$datepicker.init = function () {\n\t\t\t\t\tif (isNative && options.useNative) {\n\t\t\t\t\t\telement.prop('type', 'date');\n\t\t\t\t\t\telement.css('-webkit-appearance', 'textfield');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else if (isTouch) {\n\t\t\t\t\t\telement.prop('type', 'text');\n\t\t\t\t\t\telement.attr('readonly', 'true');\n\t\t\t\t\t\telement.on('click', focusElement);\n\t\t\t\t\t}\n\t\t\t\t\t_init();\n\t\t\t\t};\n\n\t\t\t\tvar _destroy = $datepicker.destroy;\n\t\t\t\t$datepicker.destroy = function () {\n\t\t\t\t\tif (isNative && options.useNative) {\n\t\t\t\t\t\telement.off('click', focusElement);\n\t\t\t\t\t}\n\t\t\t\t\t_destroy();\n\t\t\t\t};\n\n\t\t\t\tvar _show = $datepicker.show;\n\t\t\t\t$datepicker.show = function () {\n\t\t\t\t\tif ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n\t\t\t\t\t_show();\n\t\t\t\t\t// use timeout to hookup the events to prevent\n\t\t\t\t\t// event bubbling from being processed imediately.\n\t\t\t\t\t$timeout(function () {\n\t\t\t\t\t\t// if $datepicker is no longer showing, don't setup events\n\t\t\t\t\t\tif (!$datepicker.$isShown) return;\n\t\t\t\t\t\t$datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n\t\t\t\t\t\tif (options.keyboard) {\n\t\t\t\t\t\t\telement.on('keydown', $datepicker.$onKeyDown);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 0, false);\n\t\t\t\t};\n\n\t\t\t\tvar _hide = $datepicker.hide;\n\t\t\t\t$datepicker.hide = function (blur) {\n\t\t\t\t\tif (!$datepicker.$isShown) return;\n\t\t\t\t\t$datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n\t\t\t\t\tif (options.keyboard) {\n\t\t\t\t\t\telement.off('keydown', $datepicker.$onKeyDown);\n\t\t\t\t\t}\n\t\t\t\t\t_hide(blur);\n\t\t\t\t};\n\n\t\t\t\treturn $datepicker;\n\t\t\t}\n\n\t\t\tDatepickerFactory.defaults = defaults;\n\t\t\treturn DatepickerFactory;\n\t\t};\n\t})\n\n\t.directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\t\t// var defaults = $datepicker.defaults;\n\t\tvar isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n\t\treturn {\n\t\t\trestrict: 'EAC',\n\t\t\trequire: 'ngModel',\n\t\t\tlink: function postLink(scope, element, attr, controller) {\n\t\t\t\t// Directive options\n\t\t\t\tvar options = { scope: scope };\n\t\t\t\tangular.forEach([\n\t\t\t\t\t'template',\n\t\t\t\t\t'templateUrl',\n\t\t\t\t\t'controller',\n\t\t\t\t\t'controllerAs',\n\t\t\t\t\t'placement',\n\t\t\t\t\t'container',\n\t\t\t\t\t'delay',\n\t\t\t\t\t'trigger',\n\t\t\t\t\t'html',\n\t\t\t\t\t'animation',\n\t\t\t\t\t'autoclose',\n\t\t\t\t\t'dateType',\n\t\t\t\t\t'dateFormat',\n\t\t\t\t\t'timezone',\n\t\t\t\t\t'modelDateFormat',\n\t\t\t\t\t'dayFormat',\n\t\t\t\t\t'strictFormat',\n\t\t\t\t\t'startWeek',\n\t\t\t\t\t'startDate',\n\t\t\t\t\t'useNative',\n\t\t\t\t\t'lang',\n\t\t\t\t\t'startView',\n\t\t\t\t\t'minView',\n\t\t\t\t\t'iconLeft',\n\t\t\t\t\t'iconRight',\n\t\t\t\t\t'daysOfWeekDisabled',\n\t\t\t\t\t'id',\n\t\t\t\t\t'prefixClass',\n\t\t\t\t\t'prefixEvent',\n\t\t\t\t\t'hasToday',\n\t\t\t\t\t'hasClear',\n\t\t\t\t\t'fallbackFormats'\n\t\t\t\t], function (key) {\n\t\t\t\t\tif (angular.isDefined(attr[key])) {\n\t\t\t\t\t\toptions[key] = attr[key];\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// use string regex match boolean attr falsy values, leave truthy values be\n\t\t\t\tvar falseValueRegExp = /^(false|0|)$/i;\n\t\t\t\tangular.forEach([\n\t\t\t\t\t'html',\n\t\t\t\t\t'container',\n\t\t\t\t\t'autoclose',\n\t\t\t\t\t'useNative',\n\t\t\t\t\t'hasToday',\n\t\t\t\t\t'hasClear'\n\t\t\t\t], function (key) {\n\t\t\t\t\tif (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n\t\t\t\t\t\toptions[key] = false;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// bind functions from the attrs to the show and hide events\n\t\t\t\tangular.forEach([\n\t\t\t\t\t'onBeforeShow',\n\t\t\t\t\t'onShow',\n\t\t\t\t\t'onBeforeHide',\n\t\t\t\t\t'onHide',\n\t\t\t\t\t'onInvalid',\n\t\t\t\t\t'onValid'\n\t\t\t\t], function (key) {\n\t\t\t\t\tvar bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n\t\t\t\t\tif (angular.isDefined(attr[bsKey])) {\n\t\t\t\t\t\toptions[key] = scope.$eval(attr[bsKey]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t//bind fallback array if defined\n\t\t\t\tif (angular.isDefined(attr.fallbackFormats)) {\n\t\t\t\t\toptions.fallbackFormats = scope.$eval(attr.fallbackFormats);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\toptions.fallbackFormats = [];\n\t\t\t\t}\n\n\t\t\t\t// Initialize datepicker\n\t\t\t\tvar datepicker = $datepicker(element, controller, options);\n\t\t\t\toptions = datepicker.$options;\n\t\t\t\t// Set expected iOS format\n\t\t\t\tif (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n\t\t\t\tvar lang = options.lang;\n\n\t\t\t\tvar formatDate = function (date, format) {\n\t\t\t\t\treturn $dateFormatter.formatDate(date, format, lang);\n\t\t\t\t};\n\n\t\t\t\tvar dateParser = $dateParser({\n\t\t\t\t\tformat: options.dateFormat,\n\t\t\t\t\tlang: lang,\n\t\t\t\t\tstrict: options.strictFormat\n\t\t\t\t});\n\t\t\t\tvar fallbackParsers = [];\n\t\t\t\tfor (var i = 0; i < options.fallbackFormats.length; i++) {\n\t\t\t\t\tvar format = options.fallbackFormats[i];\n\t\t\t\t\tfallbackParsers.push($dateParser({\n\t\t\t\t\t\tformat: format,\n\t\t\t\t\t\tlang: lang,\n\t\t\t\t\t\tstrict: options.strictFormat\n\t\t\t\t\t}));\n\t\t\t\t}\n\n\t\t\t\t// Visibility binding support\n\t\t\t\tif (attr.bsShow) {\n\t\t\t\t\tscope.$watch(attr.bsShow, function (newValue, oldValue) {\n\t\t\t\t\t\tif (!datepicker || !angular.isDefined(newValue)) return;\n\t\t\t\t\t\tif (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n\t\t\t\t\t\tif (newValue === true) {\n\t\t\t\t\t\t\tdatepicker.show();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdatepicker.hide();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Observe attributes for changes\n\t\t\t\tangular.forEach(['minDate', 'maxDate'], function (key) {\n\t\t\t\t\t// console.warn('attr.$observe(%s)', key, attr[key]);\n\t\t\t\t\tif (angular.isDefined(attr[key])) {\n\t\t\t\t\t\tattr.$observe(key, function (newValue) {\n\t\t\t\t\t\t\t// console.warn('attr.$observe(%s)=%o', key, newValue);\n\t\t\t\t\t\t\tdatepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n\t\t\t\t\t\t\t// Build only if dirty\n\t\t\t\t\t\t\tif (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n\t\t\t\t\t\t\tvalidateAgainstMinMaxDate(controller.$dateValue);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Observe date format\n\t\t\t\tif (angular.isDefined(attr.dateFormat)) {\n\t\t\t\t\tattr.$observe('dateFormat', function (newValue) {\n\t\t\t\t\t\tdatepicker.$options.dateFormat = newValue;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Watch model for changes\n\t\t\t\tscope.$watch(attr.ngModel, function (newValue, oldValue) {\n\t\t\t\t\tdatepicker.update(controller.$dateValue);\n\t\t\t\t}, true);\n\n\t\t\t\t// Normalize undefined/null/empty array,\n\t\t\t\t// so that we don't treat changing from undefined->null as a change.\n\t\t\t\tfunction normalizeDateRanges(ranges) {\n\t\t\t\t\tif (!ranges || !ranges.length) return null;\n\t\t\t\t\treturn ranges;\n\t\t\t\t}\n\n\t\t\t\tif (angular.isDefined(attr.disabledDates)) {\n\t\t\t\t\tscope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n\t\t\t\t\t\tdisabledRanges = normalizeDateRanges(disabledRanges);\n\t\t\t\t\t\tpreviousValue = normalizeDateRanges(previousValue);\n\n\t\t\t\t\t\tif (disabledRanges) {\n\t\t\t\t\t\t\tdatepicker.updateDisabledDates(disabledRanges);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tfunction validateAgainstMinMaxDate(parsedDate) {\n\t\t\t\t\tif (!angular.isDate(parsedDate)) return;\n\t\t\t\t\tvar isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n\t\t\t\t\tvar isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n\t\t\t\t\tvar isValid = isMinValid && isMaxValid;\n\t\t\t\t\tcontroller.$setValidity('date', isValid);\n\t\t\t\t\tcontroller.$setValidity('min', isMinValid);\n\t\t\t\t\tcontroller.$setValidity('max', isMaxValid);\n\n\t\t\t\t\t// Only update the model when we have a valid date\n\t\t\t\t\tif (isValid) controller.$dateValue = parsedDate;\n\n\t\t\t\t\treturn isValid && isMaxValid && isMinValid;\n\t\t\t\t}\n\n\t\t\t\tfunction tryFallbackFormats(viewValue) {\n\t\t\t\t\tvar result;\n\t\t\t\t\tfor (var i = 0; i < fallbackParsers.length; i++) {\n\t\t\t\t\t\tvar parser = fallbackParsers[i];\n\t\t\t\t\t\tvar result = parser.parse(viewValue, controller.$dateValue);\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//Return undefined if a fallback date wasn't matched\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfunction triggerValid() {\n\t\t\t\t\tif (options.onValid) {\n\t\t\t\t\t\toptions.onValid();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction triggerInvalid() {\n\t\t\t\t\tif (options.onInvalid) {\n\t\t\t\t\t\toptions.onInvalid();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// viewValue -> $parsers -> modelValue\n\t\t\t\tcontroller.$parsers.unshift(function (viewValue) {\n\t\t\t\t\tvar date;\n\t\t\t\t\t// Null values should correctly reset the model value & validity\n\t\t\t\t\tif (!viewValue) {\n\t\t\t\t\t\tcontroller.$setValidity('date', true);\n\n\t\t\t\t\t\t// BREAKING CHANGE:\n\t\t\t\t\t\t// return null (not undefined) when input value is empty, so angularjs 1.3\n\t\t\t\t\t\t// ngModelController can go ahead and run validators, like ngRequired\n\t\t\t\t\t\ttriggerValid();\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tvar parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n\n\t\t\t\t\tif (!parsedDate || isNaN(parsedDate.getTime())) {\n\t\t\t\t\t\tparsedDate = tryFallbackFormats(viewValue);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!parsedDate || isNaN(parsedDate.getTime())) {\n\t\t\t\t\t\tcontroller.$setValidity('date', false);\n\n\t\t\t\t\t\t// return undefined, causes ngModelController to\n\t\t\t\t\t\t// invalidate model value\n\t\t\t\t\t\ttriggerInvalid();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (!validateAgainstMinMaxDate(parsedDate)) {\n\t\t\t\t\t\ttriggerInvalid();\n\t\t\t\t\t}\n\n\t\t\t\t\ttriggerValid();\n\n\t\t\t\t\tif (options.dateType === 'string') {\n\t\t\t\t\t\tdate = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n\t\t\t\t\t\treturn formatDate(date, options.modelDateFormat || options.dateFormat);\n\t\t\t\t\t}\n\t\t\t\t\tdate = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n\t\t\t\t\tif (options.dateType === 'number') {\n\t\t\t\t\t\treturn date.getTime();\n\t\t\t\t\t} else if (options.dateType === 'unix') {\n\t\t\t\t\t\treturn date.getTime() / 1000;\n\t\t\t\t\t} else if (options.dateType === 'iso') {\n\t\t\t\t\t\treturn date.toISOString();\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Date(date);\n\t\t\t\t});\n\n\t\t\t\t// modelValue -> $formatters -> viewValue\n\t\t\t\tcontroller.$formatters.push(function (modelValue) {\n\t\t\t\t\tvar date;\n\t\t\t\t\tif (angular.isUndefined(modelValue) || modelValue === null) {\n\t\t\t\t\t\tdate = NaN;\n\t\t\t\t\t} else if (angular.isDate(modelValue)) {\n\t\t\t\t\t\tdate = modelValue;\n\t\t\t\t\t} else if (options.dateType === 'string') {\n\t\t\t\t\t\tdate = dateParser.parse(modelValue, null, options.modelDateFormat);\n\t\t\t\t\t} else if (options.dateType === 'unix') {\n\t\t\t\t\t\tdate = new Date(modelValue * 1000);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdate = new Date(modelValue);\n\t\t\t\t\t}\n\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n\t\t\t\t\treturn getDateFormattedString();\n\t\t\t\t});\n\n\t\t\t\t// viewValue -> element\n\t\t\t\tcontroller.$render = function () {\n\t\t\t\t\t// console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n\t\t\t\t\telement.val(getDateFormattedString());\n\t\t\t\t};\n\n\t\t\t\tfunction getDateFormattedString() {\n\t\t\t\t\treturn !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n\t\t\t\t}\n\n\t\t\t\t// Garbage collection\n\t\t\t\tscope.$on('$destroy', function () {\n\t\t\t\t\tif (datepicker) datepicker.destroy();\n\t\t\t\t\toptions = null;\n\t\t\t\t\tdatepicker = null;\n\t\t\t\t});\n\n\t\t\t}\n\t\t};\n\n\t})\n\n\t.provider('datepickerViews', function () {\n\n\t\t// var defaults = this.defaults = {\n\t\t//   dayFormat: 'dd',\n\t\t//   daySplit: 7\n\t\t// };\n\n\t\t// Split array into smaller arrays\n\t\tfunction split(arr, size) {\n\t\t\tvar arrays = [];\n\t\t\twhile (arr.length > 0) {\n\t\t\t\tarrays.push(arr.splice(0, size));\n\t\t\t}\n\t\t\treturn arrays;\n\t\t}\n\n\t\t// Modulus operator\n\t\tfunction mod(n, m) {\n\t\t\treturn ((n % m) + m) % m;\n\t\t}\n\n\t\tthis.$get = function ($dateFormatter, $dateParser, $sce) {\n\n\t\t\treturn function (picker) {\n\n\t\t\t\tvar scope = picker.$scope;\n\t\t\t\tvar options = picker.$options;\n\n\t\t\t\tvar lang = options.lang;\n\t\t\t\tvar formatDate = function (date, format) {\n\t\t\t\t\treturn $dateFormatter.formatDate(date, format, lang);\n\t\t\t\t};\n\t\t\t\tvar dateParser = $dateParser({ format: options.dateFormat, lang: lang, strict: options.strictFormat });\n\n\t\t\t\tvar weekDaysMin = $dateFormatter.weekdaysShort(lang);\n\t\t\t\tvar weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n\t\t\t\tvar weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n\t\t\t\tvar startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n\t\t\t\tvar viewDate = { year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate() };\n\n\t\t\t\tvar views = [{\n\t\t\t\t\tformat: options.dayFormat,\n\t\t\t\t\tsplit: 7,\n\t\t\t\t\tsteps: { month: 1 },\n\t\t\t\t\tupdate: function (date, force) {\n\t\t\t\t\t\tif (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n\t\t\t\t\t\t\tangular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n\t\t\t\t\t\t\tpicker.$build();\n\t\t\t\t\t\t} else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n\t\t\t\t\t\t\t// chaging picker current month will cause viewDate.date to be set to first day of the month,\n\t\t\t\t\t\t\t// in $datepicker.$selectPane, so picker would not update selected day display if\n\t\t\t\t\t\t\t// user picks first day of the new month.\n\t\t\t\t\t\t\t// As a workaround, we are always forcing update when picked date is first day of month.\n\t\t\t\t\t\t\tviewDate.date = picker.$date.getDate();\n\t\t\t\t\t\t\tpicker.$updateSelected();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tbuild: function () {\n\t\t\t\t\t\tvar firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n\t\t\t\t\t\tvar firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n\t\t\t\t\t\tvar firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n\t\t\t\t\t\tvar firstDateOffset = firstDate.getTimezoneOffset();\n\t\t\t\t\t\tvar today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n\t\t\t\t\t\t// Handle daylight time switch\n\t\t\t\t\t\tif (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n\t\t\t\t\t\tvar days = [];\n\t\t\t\t\t\tvar day;\n\t\t\t\t\t\tfor (var i = 0; i < 42; i++) { // < 7 * 6\n\t\t\t\t\t\t\tday = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n\t\t\t\t\t\t\tdays.push({ date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day) });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tscope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n\t\t\t\t\t\tscope.showLabels = true;\n\t\t\t\t\t\tscope.labels = weekDaysLabelsHtml;\n\t\t\t\t\t\tscope.rows = split(days, this.split);\n\t\t\t\t\t\tscope.isTodayDisabled = this.isDisabled(new Date());\n\t\t\t\t\t\tthis.built = true;\n\t\t\t\t\t},\n\t\t\t\t\tisSelected: function (date) {\n\t\t\t\t\t\treturn picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n\t\t\t\t\t},\n\t\t\t\t\tisDisabled: function (date) {\n\t\t\t\t\t\tvar time = date.getTime();\n\n\t\t\t\t\t\t// Disabled because of min/max date.\n\t\t\t\t\t\tif (time < options.minDate || time > options.maxDate) return true;\n\n\t\t\t\t\t\t// Disabled due to being a disabled day of the week\n\t\t\t\t\t\tif (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n\t\t\t\t\t\t// Disabled because of disabled date range.\n\t\t\t\t\t\tif (options.disabledDateRanges) {\n\t\t\t\t\t\t\tfor (var i = 0; i < options.disabledDateRanges.length; i++) {\n\t\t\t\t\t\t\t\tif (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t},\n\t\t\t\t\tonKeyDown: function (evt) {\n\t\t\t\t\t\tif (!picker.$date) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar actualTime = picker.$date.getTime();\n\t\t\t\t\t\tvar newDate;\n\n\t\t\t\t\t\tif (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n\t\t\t\t\t\telse if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n\t\t\t\t\t\telse if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n\t\t\t\t\t\telse if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n\t\t\t\t\t\tif (!this.isDisabled(newDate)) picker.select(newDate, true);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tname: 'month',\n\t\t\t\t\tformat: options.monthFormat,\n\t\t\t\t\tsplit: 4,\n\t\t\t\t\tsteps: { year: 1 },\n\t\t\t\t\tupdate: function (date, force) {\n\t\t\t\t\t\tif (!this.built || date.getFullYear() !== viewDate.year) {\n\t\t\t\t\t\t\tangular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n\t\t\t\t\t\t\tpicker.$build();\n\t\t\t\t\t\t} else if (date.getMonth() !== viewDate.month) {\n\t\t\t\t\t\t\tangular.extend(viewDate, { month: picker.$date.getMonth(), date: picker.$date.getDate() });\n\t\t\t\t\t\t\tpicker.$updateSelected();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tbuild: function () {\n\t\t\t\t\t\t// var firstMonth = new Date(viewDate.year, 0, 1);\n\t\t\t\t\t\tvar months = [];\n\t\t\t\t\t\tvar month;\n\t\t\t\t\t\tfor (var i = 0; i < 12; i++) {\n\t\t\t\t\t\t\tmonth = new Date(viewDate.year, i, 1);\n\t\t\t\t\t\t\tmonths.push({ date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month) });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tscope.title = formatDate(month, options.yearTitleFormat);\n\t\t\t\t\t\tscope.showLabels = false;\n\t\t\t\t\t\tscope.rows = split(months, this.split);\n\t\t\t\t\t\tthis.built = true;\n\t\t\t\t\t},\n\t\t\t\t\tisSelected: function (date) {\n\t\t\t\t\t\treturn picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n\t\t\t\t\t},\n\t\t\t\t\tisDisabled: function (date) {\n\t\t\t\t\t\tvar lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n\t\t\t\t\t\treturn lastDate < options.minDate || date.getTime() > options.maxDate;\n\t\t\t\t\t},\n\t\t\t\t\tonKeyDown: function (evt) {\n\t\t\t\t\t\tif (!picker.$date) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar actualMonth = picker.$date.getMonth();\n\t\t\t\t\t\tvar newDate = new Date(picker.$date);\n\n\t\t\t\t\t\tif (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n\t\t\t\t\t\telse if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n\t\t\t\t\t\telse if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n\t\t\t\t\t\telse if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n\t\t\t\t\t\tif (!this.isDisabled(newDate)) picker.select(newDate, true);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tname: 'year',\n\t\t\t\t\tformat: options.yearFormat,\n\t\t\t\t\tsplit: 4,\n\t\t\t\t\tsteps: { year: 12 },\n\t\t\t\t\tupdate: function (date, force) {\n\t\t\t\t\t\tif (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n\t\t\t\t\t\t\tangular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n\t\t\t\t\t\t\tpicker.$build();\n\t\t\t\t\t\t} else if (date.getFullYear() !== viewDate.year) {\n\t\t\t\t\t\t\tangular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n\t\t\t\t\t\t\tpicker.$updateSelected();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tbuild: function () {\n\t\t\t\t\t\tvar firstYear = viewDate.year - viewDate.year % (this.split * 3);\n\t\t\t\t\t\tvar years = [];\n\t\t\t\t\t\tvar year;\n\t\t\t\t\t\tfor (var i = 0; i < 12; i++) {\n\t\t\t\t\t\t\tyear = new Date(firstYear + i, 0, 1);\n\t\t\t\t\t\t\tyears.push({ date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year) });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tscope.title = years[0].label + '-' + years[years.length - 1].label;\n\t\t\t\t\t\tscope.showLabels = false;\n\t\t\t\t\t\tscope.rows = split(years, this.split);\n\t\t\t\t\t\tthis.built = true;\n\t\t\t\t\t},\n\t\t\t\t\tisSelected: function (date) {\n\t\t\t\t\t\treturn picker.$date && date.getFullYear() === picker.$date.getFullYear();\n\t\t\t\t\t},\n\t\t\t\t\tisDisabled: function (date) {\n\t\t\t\t\t\tvar lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n\t\t\t\t\t\treturn lastDate < options.minDate || date.getTime() > options.maxDate;\n\t\t\t\t\t},\n\t\t\t\t\tonKeyDown: function (evt) {\n\t\t\t\t\t\tif (!picker.$date) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar actualYear = picker.$date.getFullYear();\n\t\t\t\t\t\tvar newDate = new Date(picker.$date);\n\n\t\t\t\t\t\tif (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n\t\t\t\t\t\telse if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n\t\t\t\t\t\telse if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n\t\t\t\t\t\telse if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n\t\t\t\t\t\tif (!this.isDisabled(newDate)) picker.select(newDate, true);\n\t\t\t\t\t}\n\t\t\t\t}];\n\n\t\t\t\treturn {\n\t\t\t\t\tviews: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n\t\t\t\t\tviewDate: viewDate\n\t\t\t\t};\n\n\t\t\t};\n\n\t\t};\n\n\t});\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory(element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick(evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink(scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n\n\t\t\t// scroll to active list item\n            $timeout(function () {\n              var ddlMenuContainer = angular.element('ul.select.dropdown-menu:last-of-type').get(0);\n              var activeListItem = angular.element(ddlMenuContainer).find('li.active:first');\n              var listItemHeight = activeListItem.height();\n              var itemPosition = ddlMenuContainer.scrollTop + activeListItem.position().top;\n              var menuHeight = angular.element(ddlMenuContainer).height();\n\n              if (itemPosition < ddlMenuContainer.scrollTop) {\n                  ddlMenuContainer.scrollTop = itemPosition;\n              }\n              else if ((itemPosition + listItemHeight) > (ddlMenuContainer.scrollTop + menuHeight)) {\n                  ddlMenuContainer.scrollTop += (itemPosition + listItemHeight) - (ddlMenuContainer.scrollTop + menuHeight);\n              }\n            });\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker',\n\t[\n\t\t'mgcrea.ngStrap.helpers.dateParser',\n\t\t'mgcrea.ngStrap.helpers.dateFormatter',\n\t\t'mgcrea.ngStrap.tooltip'\n\t])\n\t.provider('$datepicker', function () {\n\t\tvar defaults = this.defaults = {\n\t\t\tanimation: 'am-fade',\n\t\t\tprefixClass: 'datepicker',\n\t\t\tplacement: 'bottom-left',\n\t\t\ttemplateUrl: 'datepicker/datepicker.tpl.html',\n\t\t\ttrigger: 'focus',\n\t\t\tcontainer: false,\n\t\t\tkeyboard: true,\n\t\t\thtml: false,\n\t\t\tdelay: 0,\n\t\t\tuseNative: false,\n\t\t\tdateType: 'date',\n\t\t\tdateFormat: 'shortDate',\n\t\t\ttimezone: null,\n\t\t\tmodelDateFormat: null,\n\t\t\tdayFormat: 'dd',\n\t\t\tmonthFormat: 'MMM',\n\t\t\tyearFormat: 'yyyy',\n\t\t\tmonthTitleFormat: 'MMMM yyyy',\n\t\t\tyearTitleFormat: 'yyyy',\n\t\t\tstrictFormat: false,\n\t\t\tautoclose: false,\n\t\t\tminDate: -Infinity,\n\t\t\tmaxDate: +Infinity,\n\t\t\tstartView: 0,\n\t\t\tminView: 0,\n\t\t\tstartWeek: 0,\n\t\t\tdaysOfWeekDisabled: '',\n\t\t\thasToday: false,\n\t\t\thasClear: false,\n\t\t\ticonLeft: 'glyphicon glyphicon-chevron-left',\n\t\t\ticonRight: 'glyphicon glyphicon-chevron-right',\n\t\t\tfallbackFormats: []\n\t\t};\n\n\t\tthis.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\t\t\tvar isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\t\t\tvar isTouch = ('createTouch' in $window.document) && isNative;\n\t\t\tif (!defaults.lang) {\n\t\t\t\tdefaults.lang = $dateFormatter.getDefaultLocale();\n\t\t\t}\n\n\t\t\tfunction DatepickerFactory(element, controller, config) {\n\t\t\t\tvar $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n\t\t\t\tvar parentScope = config.scope;\n\t\t\t\tvar options = $datepicker.$options;\n\t\t\t\tvar scope = $datepicker.$scope;\n\t\t\t\tif (options.startView) {\n\t\t\t\t\toptions.startView -= options.minView;\n\t\t\t\t}\n\n\t\t\t\t// View vars\n\n\t\t\t\tvar pickerViews = datepickerViews($datepicker);\n\t\t\t\t$datepicker.$views = pickerViews.views;\n\t\t\t\tvar viewDate = pickerViews.viewDate;\n\t\t\t\tscope.$mode = options.startView;\n\t\t\t\tscope.$iconLeft = options.iconLeft;\n\t\t\t\tscope.$iconRight = options.iconRight;\n\t\t\t\tscope.$hasToday = options.hasToday;\n\t\t\t\tscope.$hasClear = options.hasClear;\n\t\t\t\tvar $picker = $datepicker.$views[scope.$mode];\n\n\t\t\t\t// Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n\t\t\t\t\t$datepicker.select(date);\n\t\t\t\t};\n\t\t\t\tscope.$selectPane = function (value) {\n\t\t\t\t\t$datepicker.$selectPane(value);\n\t\t\t\t};\n\t\t\t\tscope.$toggleMode = function () {\n\t\t\t\t\t$datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n\t\t\t\t};\n\t\t\t\tscope.$setToday = function () {\n\t\t\t\t\tif (options.autoclose) {\n\t\t\t\t\t\t$datepicker.setMode(0);\n\t\t\t\t\t\t$datepicker.select(new Date());\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$datepicker.select(new Date(), true);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tscope.$clear = function () {\n\t\t\t\t\tif (options.autoclose) {\n\t\t\t\t\t\t$datepicker.setMode(0);\n\t\t\t\t\t\t$datepicker.select(null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$datepicker.select(null, true);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Public methods\n\n\t\t\t\t$datepicker.update = function (date) {\n\t\t\t\t\t// console.warn('$datepicker.update() newValue=%o', date);\n\t\t\t\t\tif (angular.isDate(date) && !isNaN(date.getTime())) {\n\t\t\t\t\t\t$datepicker.$date = date;\n\t\t\t\t\t\t$picker.update.call($picker, date);\n\t\t\t\t\t}\n\t\t\t\t\t// Build only if pristine\n\t\t\t\t\t$datepicker.$build(true);\n\t\t\t\t};\n\n\t\t\t\t$datepicker.updateDisabledDates = function (dateRanges) {\n\t\t\t\t\toptions.disabledDateRanges = dateRanges;\n\t\t\t\t\tfor (var i = 0, l = scope.rows.length; i < l; i++) {\n\t\t\t\t\t\tangular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t$datepicker.select = function (date, keep) {\n\t\t\t\t\t// console.warn('$datepicker.select', date, scope.$mode);\n\t\t\t\t\tif (angular.isDate(date)) {\n\t\t\t\t\t\tif (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n\t\t\t\t\t\t\tcontroller.$dateValue = new Date(date);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontroller.$dateValue = null;\n\t\t\t\t\t}\n\t\t\t\t\tif (!scope.$mode || keep) {\n\t\t\t\t\t\tcontroller.$setViewValue(angular.copy(date));\n\t\t\t\t\t\tcontroller.$render();\n\t\t\t\t\t\tif (options.autoclose && !keep) {\n\t\t\t\t\t\t\t$timeout(function () { $datepicker.hide(true); });\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tangular.extend(viewDate, { year: date.getFullYear(), month: date.getMonth(), date: date.getDate() });\n\t\t\t\t\t\t$datepicker.setMode(scope.$mode - 1);\n\t\t\t\t\t\t$datepicker.$build();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t$datepicker.setMode = function (mode) {\n\t\t\t\t\t// console.warn('$datepicker.setMode', mode);\n\t\t\t\t\tscope.$mode = mode;\n\t\t\t\t\t$picker = $datepicker.$views[scope.$mode];\n\t\t\t\t\t$datepicker.$build();\n\t\t\t\t};\n\n\t\t\t\t// Protected methods\n\n\t\t\t\t$datepicker.$build = function (pristine) {\n\t\t\t\t\t// console.warn('$datepicker.$build() viewDate=%o', viewDate);\n\t\t\t\t\tif (pristine === true && $picker.built) return;\n\t\t\t\t\tif (pristine === false && !$picker.built) return;\n\t\t\t\t\t$picker.build.call($picker);\n\t\t\t\t};\n\n\t\t\t\t$datepicker.$updateSelected = function () {\n\t\t\t\t\tfor (var i = 0, l = scope.rows.length; i < l; i++) {\n\t\t\t\t\t\tangular.forEach(scope.rows[i], updateSelected);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t$datepicker.$isSelected = function (date) {\n\t\t\t\t\treturn $picker.isSelected(date);\n\t\t\t\t};\n\n\t\t\t\t$datepicker.$setDisabledEl = function (el) {\n\t\t\t\t\tel.disabled = $picker.isDisabled(el.date);\n\t\t\t\t};\n\n\t\t\t\t$datepicker.$selectPane = function (value) {\n\t\t\t\t\tvar steps = $picker.steps;\n\t\t\t\t\t// set targetDate to first day of month to avoid problems with\n\t\t\t\t\t// date values rollover. This assumes the viewDate does not\n\t\t\t\t\t// depend on the day of the month\n\t\t\t\t\tvar targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n\t\t\t\t\tangular.extend(viewDate, { year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate() });\n\t\t\t\t\t$datepicker.$build();\n\t\t\t\t};\n\n\t\t\t\t$datepicker.$onMouseDown = function (evt) {\n\t\t\t\t\t// Prevent blur on mousedown on .dropdown-menu\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\tevt.stopPropagation();\n\t\t\t\t\t// Emulate click for mobile devices\n\t\t\t\t\tif (isTouch) {\n\t\t\t\t\t\tvar targetEl = angular.element(evt.target);\n\t\t\t\t\t\tif (targetEl[0].nodeName.toLowerCase() !== 'button') {\n\t\t\t\t\t\t\ttargetEl = targetEl.parent();\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttargetEl.triggerHandler('click');\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t$datepicker.$onKeyDown = function (evt) {\n\t\t\t\t\tif (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\tevt.stopPropagation();\n\n\t\t\t\t\tif (evt.keyCode === 13) {\n\t\t\t\t\t\tif (!scope.$mode) {\n\t\t\t\t\t\t\t$datepicker.hide(true);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tscope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Navigate with keyboard\n\t\t\t\t\t$picker.onKeyDown(evt);\n\t\t\t\t\tparentScope.$digest();\n\t\t\t\t};\n\n\t\t\t\t// Private\n\n\t\t\t\tfunction updateSelected(el) {\n\t\t\t\t\tel.selected = $datepicker.$isSelected(el.date);\n\t\t\t\t}\n\n\t\t\t\tfunction focusElement() {\n\t\t\t\t\telement[0].focus();\n\t\t\t\t}\n\n\t\t\t\t// Overrides\n\n\t\t\t\tvar _init = $datepicker.init;\n\t\t\t\t$datepicker.init = function () {\n\t\t\t\t\tif (isNative && options.useNative) {\n\t\t\t\t\t\telement.prop('type', 'date');\n\t\t\t\t\t\telement.css('-webkit-appearance', 'textfield');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else if (isTouch) {\n\t\t\t\t\t\telement.prop('type', 'text');\n\t\t\t\t\t\telement.attr('readonly', 'true');\n\t\t\t\t\t\telement.on('click', focusElement);\n\t\t\t\t\t}\n\t\t\t\t\t_init();\n\t\t\t\t};\n\n\t\t\t\tvar _destroy = $datepicker.destroy;\n\t\t\t\t$datepicker.destroy = function () {\n\t\t\t\t\tif (isNative && options.useNative) {\n\t\t\t\t\t\telement.off('click', focusElement);\n\t\t\t\t\t}\n\t\t\t\t\t_destroy();\n\t\t\t\t};\n\n\t\t\t\tvar _show = $datepicker.show;\n\t\t\t\t$datepicker.show = function () {\n\t\t\t\t\tif ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n\t\t\t\t\t_show();\n\t\t\t\t\t// use timeout to hookup the events to prevent\n\t\t\t\t\t// event bubbling from being processed imediately.\n\t\t\t\t\t$timeout(function () {\n\t\t\t\t\t\t// if $datepicker is no longer showing, don't setup events\n\t\t\t\t\t\tif (!$datepicker.$isShown) return;\n\t\t\t\t\t\t$datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n\t\t\t\t\t\tif (options.keyboard) {\n\t\t\t\t\t\t\telement.on('keydown', $datepicker.$onKeyDown);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 0, false);\n\t\t\t\t};\n\n\t\t\t\tvar _hide = $datepicker.hide;\n\t\t\t\t$datepicker.hide = function (blur) {\n\t\t\t\t\tif (!$datepicker.$isShown) return;\n\t\t\t\t\t$datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n\t\t\t\t\tif (options.keyboard) {\n\t\t\t\t\t\telement.off('keydown', $datepicker.$onKeyDown);\n\t\t\t\t\t}\n\t\t\t\t\t_hide(blur);\n\t\t\t\t};\n\n\t\t\t\treturn $datepicker;\n\t\t\t}\n\n\t\t\tDatepickerFactory.defaults = defaults;\n\t\t\treturn DatepickerFactory;\n\t\t};\n\t})\n\n\t.directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\t\t// var defaults = $datepicker.defaults;\n\t\tvar isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n\t\treturn {\n\t\t\trestrict: 'EAC',\n\t\t\trequire: 'ngModel',\n\t\t\tlink: function postLink(scope, element, attr, controller) {\n\t\t\t\t// Directive options\n\t\t\t\tvar options = { scope: scope };\n\t\t\t\tangular.forEach([\n\t\t\t\t\t'template',\n\t\t\t\t\t'templateUrl',\n\t\t\t\t\t'controller',\n\t\t\t\t\t'controllerAs',\n\t\t\t\t\t'placement',\n\t\t\t\t\t'container',\n\t\t\t\t\t'delay',\n\t\t\t\t\t'trigger',\n\t\t\t\t\t'html',\n\t\t\t\t\t'animation',\n\t\t\t\t\t'autoclose',\n\t\t\t\t\t'dateType',\n\t\t\t\t\t'dateFormat',\n\t\t\t\t\t'timezone',\n\t\t\t\t\t'modelDateFormat',\n\t\t\t\t\t'dayFormat',\n\t\t\t\t\t'strictFormat',\n\t\t\t\t\t'startWeek',\n\t\t\t\t\t'startDate',\n\t\t\t\t\t'useNative',\n\t\t\t\t\t'lang',\n\t\t\t\t\t'startView',\n\t\t\t\t\t'minView',\n\t\t\t\t\t'iconLeft',\n\t\t\t\t\t'iconRight',\n\t\t\t\t\t'daysOfWeekDisabled',\n\t\t\t\t\t'id',\n\t\t\t\t\t'prefixClass',\n\t\t\t\t\t'prefixEvent',\n\t\t\t\t\t'hasToday',\n\t\t\t\t\t'hasClear',\n\t\t\t\t\t'fallbackFormats'\n\t\t\t\t], function (key) {\n\t\t\t\t\tif (angular.isDefined(attr[key])) {\n\t\t\t\t\t\toptions[key] = attr[key];\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// use string regex match boolean attr falsy values, leave truthy values be\n\t\t\t\tvar falseValueRegExp = /^(false|0|)$/i;\n\t\t\t\tangular.forEach([\n\t\t\t\t\t'html',\n\t\t\t\t\t'container',\n\t\t\t\t\t'autoclose',\n\t\t\t\t\t'useNative',\n\t\t\t\t\t'hasToday',\n\t\t\t\t\t'hasClear'\n\t\t\t\t], function (key) {\n\t\t\t\t\tif (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n\t\t\t\t\t\toptions[key] = false;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// bind functions from the attrs to the show and hide events\n\t\t\t\tangular.forEach([\n\t\t\t\t\t'onBeforeShow',\n\t\t\t\t\t'onShow',\n\t\t\t\t\t'onBeforeHide',\n\t\t\t\t\t'onHide',\n\t\t\t\t\t'onInvalid',\n\t\t\t\t\t'onValid'\n\t\t\t\t], function (key) {\n\t\t\t\t\tvar bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n\t\t\t\t\tif (angular.isDefined(attr[bsKey])) {\n\t\t\t\t\t\toptions[key] = scope.$eval(attr[bsKey]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t//bind fallback array if defined\n\t\t\t\tif (angular.isDefined(attr.fallbackFormats)) {\n\t\t\t\t\toptions.fallbackFormats = scope.$eval(attr.fallbackFormats);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\toptions.fallbackFormats = [];\n\t\t\t\t}\n\n\t\t\t\t// Initialize datepicker\n\t\t\t\tvar datepicker = $datepicker(element, controller, options);\n\t\t\t\toptions = datepicker.$options;\n\t\t\t\t// Set expected iOS format\n\t\t\t\tif (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n\t\t\t\tvar lang = options.lang;\n\n\t\t\t\tvar formatDate = function (date, format) {\n\t\t\t\t\treturn $dateFormatter.formatDate(date, format, lang);\n\t\t\t\t};\n\n\t\t\t\tvar dateParser = $dateParser({\n\t\t\t\t\tformat: options.dateFormat,\n\t\t\t\t\tlang: lang,\n\t\t\t\t\tstrict: options.strictFormat\n\t\t\t\t});\n\t\t\t\tvar fallbackParsers = [];\n\t\t\t\tfor (var i = 0; i < options.fallbackFormats.length; i++) {\n\t\t\t\t\tvar format = options.fallbackFormats[i];\n\t\t\t\t\tfallbackParsers.push($dateParser({\n\t\t\t\t\t\tformat: format,\n\t\t\t\t\t\tlang: lang,\n\t\t\t\t\t\tstrict: options.strictFormat\n\t\t\t\t\t}));\n\t\t\t\t}\n\n\t\t\t\t// Visibility binding support\n\t\t\t\tif (attr.bsShow) {\n\t\t\t\t\tscope.$watch(attr.bsShow, function (newValue, oldValue) {\n\t\t\t\t\t\tif (!datepicker || !angular.isDefined(newValue)) return;\n\t\t\t\t\t\tif (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n\t\t\t\t\t\tif (newValue === true) {\n\t\t\t\t\t\t\tdatepicker.show();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdatepicker.hide();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Observe attributes for changes\n\t\t\t\tangular.forEach(['minDate', 'maxDate'], function (key) {\n\t\t\t\t\t// console.warn('attr.$observe(%s)', key, attr[key]);\n\t\t\t\t\tif (angular.isDefined(attr[key])) {\n\t\t\t\t\t\tattr.$observe(key, function (newValue) {\n\t\t\t\t\t\t\t// console.warn('attr.$observe(%s)=%o', key, newValue);\n\t\t\t\t\t\t\tdatepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n\t\t\t\t\t\t\t// Build only if dirty\n\t\t\t\t\t\t\tif (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n\t\t\t\t\t\t\tvalidateAgainstMinMaxDate(controller.$dateValue);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Observe date format\n\t\t\t\tif (angular.isDefined(attr.dateFormat)) {\n\t\t\t\t\tattr.$observe('dateFormat', function (newValue) {\n\t\t\t\t\t\tdatepicker.$options.dateFormat = newValue;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Watch model for changes\n\t\t\t\tscope.$watch(attr.ngModel, function (newValue, oldValue) {\n\t\t\t\t\tdatepicker.update(controller.$dateValue);\n\t\t\t\t}, true);\n\n\t\t\t\t// Normalize undefined/null/empty array,\n\t\t\t\t// so that we don't treat changing from undefined->null as a change.\n\t\t\t\tfunction normalizeDateRanges(ranges) {\n\t\t\t\t\tif (!ranges || !ranges.length) return null;\n\t\t\t\t\treturn ranges;\n\t\t\t\t}\n\n\t\t\t\tif (angular.isDefined(attr.disabledDates)) {\n\t\t\t\t\tscope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n\t\t\t\t\t\tdisabledRanges = normalizeDateRanges(disabledRanges);\n\t\t\t\t\t\tpreviousValue = normalizeDateRanges(previousValue);\n\n\t\t\t\t\t\tif (disabledRanges) {\n\t\t\t\t\t\t\tdatepicker.updateDisabledDates(disabledRanges);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tfunction validateAgainstMinMaxDate(parsedDate) {\n\t\t\t\t\tif (!angular.isDate(parsedDate)) return;\n\t\t\t\t\tvar isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n\t\t\t\t\tvar isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n\t\t\t\t\tvar isValid = isMinValid && isMaxValid;\n\t\t\t\t\tcontroller.$setValidity('date', isValid);\n\t\t\t\t\tcontroller.$setValidity('min', isMinValid);\n\t\t\t\t\tcontroller.$setValidity('max', isMaxValid);\n\n\t\t\t\t\t// Only update the model when we have a valid date\n\t\t\t\t\tif (isValid) controller.$dateValue = parsedDate;\n\n\t\t\t\t\treturn isValid && isMaxValid && isMinValid;\n\t\t\t\t}\n\n\t\t\t\tfunction tryFallbackFormats(viewValue) {\n\t\t\t\t\tvar result;\n\t\t\t\t\tfor (var i = 0; i < fallbackParsers.length; i++) {\n\t\t\t\t\t\tvar parser = fallbackParsers[i];\n\t\t\t\t\t\tvar result = parser.parse(viewValue, controller.$dateValue);\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//Return undefined if a fallback date wasn't matched\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfunction triggerValid() {\n\t\t\t\t\tif (options.onValid) {\n\t\t\t\t\t\toptions.onValid();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction triggerInvalid() {\n\t\t\t\t\tif (options.onInvalid) {\n\t\t\t\t\t\toptions.onInvalid();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// viewValue -> $parsers -> modelValue\n\t\t\t\tcontroller.$parsers.unshift(function (viewValue) {\n\t\t\t\t\tvar date;\n\t\t\t\t\t// Null values should correctly reset the model value & validity\n\t\t\t\t\tif (!viewValue) {\n\t\t\t\t\t\tcontroller.$setValidity('date', true);\n\n\t\t\t\t\t\t// BREAKING CHANGE:\n\t\t\t\t\t\t// return null (not undefined) when input value is empty, so angularjs 1.3\n\t\t\t\t\t\t// ngModelController can go ahead and run validators, like ngRequired\n\t\t\t\t\t\ttriggerValid();\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tvar parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n\n\t\t\t\t\tif (!parsedDate || isNaN(parsedDate.getTime())) {\n\t\t\t\t\t\tparsedDate = tryFallbackFormats(viewValue);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!parsedDate || isNaN(parsedDate.getTime())) {\n\t\t\t\t\t\tcontroller.$setValidity('date', false);\n\n\t\t\t\t\t\t// return undefined, causes ngModelController to\n\t\t\t\t\t\t// invalidate model value\n\t\t\t\t\t\ttriggerInvalid();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (!validateAgainstMinMaxDate(parsedDate)) {\n\t\t\t\t\t\ttriggerInvalid();\n\t\t\t\t\t}\n\n\t\t\t\t\ttriggerValid();\n\n\t\t\t\t\tif (options.dateType === 'string') {\n\t\t\t\t\t\tdate = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n\t\t\t\t\t\treturn formatDate(date, options.modelDateFormat || options.dateFormat);\n\t\t\t\t\t}\n\t\t\t\t\tdate = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n\t\t\t\t\tif (options.dateType === 'number') {\n\t\t\t\t\t\treturn date.getTime();\n\t\t\t\t\t} else if (options.dateType === 'unix') {\n\t\t\t\t\t\treturn date.getTime() / 1000;\n\t\t\t\t\t} else if (options.dateType === 'iso') {\n\t\t\t\t\t\treturn date.toISOString();\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Date(date);\n\t\t\t\t});\n\n\t\t\t\t// modelValue -> $formatters -> viewValue\n\t\t\t\tcontroller.$formatters.push(function (modelValue) {\n\t\t\t\t\tvar date;\n\t\t\t\t\tif (angular.isUndefined(modelValue) || modelValue === null) {\n\t\t\t\t\t\tdate = NaN;\n\t\t\t\t\t} else if (angular.isDate(modelValue)) {\n\t\t\t\t\t\tdate = modelValue;\n\t\t\t\t\t} else if (options.dateType === 'string') {\n\t\t\t\t\t\tdate = dateParser.parse(modelValue, null, options.modelDateFormat);\n\t\t\t\t\t} else if (options.dateType === 'unix') {\n\t\t\t\t\t\tdate = new Date(modelValue * 1000);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdate = new Date(modelValue);\n\t\t\t\t\t}\n\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n\t\t\t\t\treturn getDateFormattedString();\n\t\t\t\t});\n\n\t\t\t\t// viewValue -> element\n\t\t\t\tcontroller.$render = function () {\n\t\t\t\t\t// console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n\t\t\t\t\telement.val(getDateFormattedString());\n\t\t\t\t};\n\n\t\t\t\tfunction getDateFormattedString() {\n\t\t\t\t\treturn !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n\t\t\t\t}\n\n\t\t\t\t// Garbage collection\n\t\t\t\tscope.$on('$destroy', function () {\n\t\t\t\t\tif (datepicker) datepicker.destroy();\n\t\t\t\t\toptions = null;\n\t\t\t\t\tdatepicker = null;\n\t\t\t\t});\n\n\t\t\t}\n\t\t};\n\n\t})\n\n\t.provider('datepickerViews', function () {\n\n\t\t// var defaults = this.defaults = {\n\t\t//   dayFormat: 'dd',\n\t\t//   daySplit: 7\n\t\t// };\n\n\t\t// Split array into smaller arrays\n\t\tfunction split(arr, size) {\n\t\t\tvar arrays = [];\n\t\t\twhile (arr.length > 0) {\n\t\t\t\tarrays.push(arr.splice(0, size));\n\t\t\t}\n\t\t\treturn arrays;\n\t\t}\n\n\t\t// Modulus operator\n\t\tfunction mod(n, m) {\n\t\t\treturn ((n % m) + m) % m;\n\t\t}\n\n\t\tthis.$get = function ($dateFormatter, $dateParser, $sce) {\n\n\t\t\treturn function (picker) {\n\n\t\t\t\tvar scope = picker.$scope;\n\t\t\t\tvar options = picker.$options;\n\n\t\t\t\tvar lang = options.lang;\n\t\t\t\tvar formatDate = function (date, format) {\n\t\t\t\t\treturn $dateFormatter.formatDate(date, format, lang);\n\t\t\t\t};\n\t\t\t\tvar dateParser = $dateParser({ format: options.dateFormat, lang: lang, strict: options.strictFormat });\n\n\t\t\t\tvar weekDaysMin = $dateFormatter.weekdaysShort(lang);\n\t\t\t\tvar weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n\t\t\t\tvar weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n\t\t\t\tvar startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n\t\t\t\tvar viewDate = { year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate() };\n\n\t\t\t\tvar views = [{\n\t\t\t\t\tformat: options.dayFormat,\n\t\t\t\t\tsplit: 7,\n\t\t\t\t\tsteps: { month: 1 },\n\t\t\t\t\tupdate: function (date, force) {\n\t\t\t\t\t\tif (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n\t\t\t\t\t\t\tangular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n\t\t\t\t\t\t\tpicker.$build();\n\t\t\t\t\t\t} else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n\t\t\t\t\t\t\t// chaging picker current month will cause viewDate.date to be set to first day of the month,\n\t\t\t\t\t\t\t// in $datepicker.$selectPane, so picker would not update selected day display if\n\t\t\t\t\t\t\t// user picks first day of the new month.\n\t\t\t\t\t\t\t// As a workaround, we are always forcing update when picked date is first day of month.\n\t\t\t\t\t\t\tviewDate.date = picker.$date.getDate();\n\t\t\t\t\t\t\tpicker.$updateSelected();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tbuild: function () {\n\t\t\t\t\t\tvar firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n\t\t\t\t\t\tvar firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n\t\t\t\t\t\tvar firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n\t\t\t\t\t\tvar firstDateOffset = firstDate.getTimezoneOffset();\n\t\t\t\t\t\tvar today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n\t\t\t\t\t\t// Handle daylight time switch\n\t\t\t\t\t\tif (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n\t\t\t\t\t\tvar days = [];\n\t\t\t\t\t\tvar day;\n\t\t\t\t\t\tfor (var i = 0; i < 42; i++) { // < 7 * 6\n\t\t\t\t\t\t\tday = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n\t\t\t\t\t\t\tdays.push({ date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day) });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tscope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n\t\t\t\t\t\tscope.showLabels = true;\n\t\t\t\t\t\tscope.labels = weekDaysLabelsHtml;\n\t\t\t\t\t\tscope.rows = split(days, this.split);\n\t\t\t\t\t\tscope.isTodayDisabled = this.isDisabled(new Date());\n\t\t\t\t\t\tthis.built = true;\n\t\t\t\t\t},\n\t\t\t\t\tisSelected: function (date) {\n\t\t\t\t\t\treturn picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n\t\t\t\t\t},\n\t\t\t\t\tisDisabled: function (date) {\n\t\t\t\t\t\tvar time = date.getTime();\n\n\t\t\t\t\t\t// Disabled because of min/max date.\n\t\t\t\t\t\tif (time < options.minDate || time > options.maxDate) return true;\n\n\t\t\t\t\t\t// Disabled due to being a disabled day of the week\n\t\t\t\t\t\tif (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n\t\t\t\t\t\t// Disabled because of disabled date range.\n\t\t\t\t\t\tif (options.disabledDateRanges) {\n\t\t\t\t\t\t\tfor (var i = 0; i < options.disabledDateRanges.length; i++) {\n\t\t\t\t\t\t\t\tif (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t},\n\t\t\t\t\tonKeyDown: function (evt) {\n\t\t\t\t\t\tif (!picker.$date) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar actualTime = picker.$date.getTime();\n\t\t\t\t\t\tvar newDate;\n\n\t\t\t\t\t\tif (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n\t\t\t\t\t\telse if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n\t\t\t\t\t\telse if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n\t\t\t\t\t\telse if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n\t\t\t\t\t\tif (!this.isDisabled(newDate)) picker.select(newDate, true);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tname: 'month',\n\t\t\t\t\tformat: options.monthFormat,\n\t\t\t\t\tsplit: 4,\n\t\t\t\t\tsteps: { year: 1 },\n\t\t\t\t\tupdate: function (date, force) {\n\t\t\t\t\t\tif (!this.built || date.getFullYear() !== viewDate.year) {\n\t\t\t\t\t\t\tangular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n\t\t\t\t\t\t\tpicker.$build();\n\t\t\t\t\t\t} else if (date.getMonth() !== viewDate.month) {\n\t\t\t\t\t\t\tangular.extend(viewDate, { month: picker.$date.getMonth(), date: picker.$date.getDate() });\n\t\t\t\t\t\t\tpicker.$updateSelected();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tbuild: function () {\n\t\t\t\t\t\t// var firstMonth = new Date(viewDate.year, 0, 1);\n\t\t\t\t\t\tvar months = [];\n\t\t\t\t\t\tvar month;\n\t\t\t\t\t\tfor (var i = 0; i < 12; i++) {\n\t\t\t\t\t\t\tmonth = new Date(viewDate.year, i, 1);\n\t\t\t\t\t\t\tmonths.push({ date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month) });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tscope.title = formatDate(month, options.yearTitleFormat);\n\t\t\t\t\t\tscope.showLabels = false;\n\t\t\t\t\t\tscope.rows = split(months, this.split);\n\t\t\t\t\t\tthis.built = true;\n\t\t\t\t\t},\n\t\t\t\t\tisSelected: function (date) {\n\t\t\t\t\t\treturn picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n\t\t\t\t\t},\n\t\t\t\t\tisDisabled: function (date) {\n\t\t\t\t\t\tvar lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n\t\t\t\t\t\treturn lastDate < options.minDate || date.getTime() > options.maxDate;\n\t\t\t\t\t},\n\t\t\t\t\tonKeyDown: function (evt) {\n\t\t\t\t\t\tif (!picker.$date) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar actualMonth = picker.$date.getMonth();\n\t\t\t\t\t\tvar newDate = new Date(picker.$date);\n\n\t\t\t\t\t\tif (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n\t\t\t\t\t\telse if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n\t\t\t\t\t\telse if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n\t\t\t\t\t\telse if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n\t\t\t\t\t\tif (!this.isDisabled(newDate)) picker.select(newDate, true);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tname: 'year',\n\t\t\t\t\tformat: options.yearFormat,\n\t\t\t\t\tsplit: 4,\n\t\t\t\t\tsteps: { year: 12 },\n\t\t\t\t\tupdate: function (date, force) {\n\t\t\t\t\t\tif (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n\t\t\t\t\t\t\tangular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n\t\t\t\t\t\t\tpicker.$build();\n\t\t\t\t\t\t} else if (date.getFullYear() !== viewDate.year) {\n\t\t\t\t\t\t\tangular.extend(viewDate, { year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate() });\n\t\t\t\t\t\t\tpicker.$updateSelected();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tbuild: function () {\n\t\t\t\t\t\tvar firstYear = viewDate.year - viewDate.year % (this.split * 3);\n\t\t\t\t\t\tvar years = [];\n\t\t\t\t\t\tvar year;\n\t\t\t\t\t\tfor (var i = 0; i < 12; i++) {\n\t\t\t\t\t\t\tyear = new Date(firstYear + i, 0, 1);\n\t\t\t\t\t\t\tyears.push({ date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year) });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tscope.title = years[0].label + '-' + years[years.length - 1].label;\n\t\t\t\t\t\tscope.showLabels = false;\n\t\t\t\t\t\tscope.rows = split(years, this.split);\n\t\t\t\t\t\tthis.built = true;\n\t\t\t\t\t},\n\t\t\t\t\tisSelected: function (date) {\n\t\t\t\t\t\treturn picker.$date && date.getFullYear() === picker.$date.getFullYear();\n\t\t\t\t\t},\n\t\t\t\t\tisDisabled: function (date) {\n\t\t\t\t\t\tvar lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n\t\t\t\t\t\treturn lastDate < options.minDate || date.getTime() > options.maxDate;\n\t\t\t\t\t},\n\t\t\t\t\tonKeyDown: function (evt) {\n\t\t\t\t\t\tif (!picker.$date) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar actualYear = picker.$date.getFullYear();\n\t\t\t\t\t\tvar newDate = new Date(picker.$date);\n\n\t\t\t\t\t\tif (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n\t\t\t\t\t\telse if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n\t\t\t\t\t\telse if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n\t\t\t\t\t\telse if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n\t\t\t\t\t\tif (!this.isDisabled(newDate)) picker.select(newDate, true);\n\t\t\t\t\t}\n\t\t\t\t}];\n\n\t\t\t\treturn {\n\t\t\t\t\tviews: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n\t\t\t\t\tviewDate: viewDate\n\t\t\t\t};\n\n\t\t\t};\n\n\t\t};\n\n\t});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}